  之前我们已经了解了模型以及与数据库相关联的知识，这儿学习下如何通过模型跟数据库进行交互。
  
  打开虚拟环境下Python交互式解释器Pythonmanage.py shell：
[1]from books import models
[2]p1 = models.Publisher(name = "...",...)
[3]p1.save()
[4]p2 = models.Pubslisher(name = "...")
[5]p2.save()
通过上面脚本代码我们做了两件事，第一件是新建立了一个Publisher对象（model.Publisher(..)），第二件事就是将该对象保存到数据库（p1.save()），注意第一件事
只是新建对象而没有跟数据库有任何接触，只有显示执行对象上的save()方法时才会将数据保存到数据库中，若想一步完成这两件事，可以通过models.Publsher.create(
name = "...",..)方法来实现。由于Django自动为每个表加了id关键字主键（默认情况下），因此可以通过对象的id来得知当前的id号，如：p1.id。

  数据库操作无非是增删查修改，对Django中的数据库来说也是如此。Django中用models.Publisher.objects对象来管理所有该models.Publsiher的实例，也就是表
中的每一行记录，可以通过models.Publisher.objects.filter(kwargs)来实现特定条件的查找，相当于SQL中的select ... from where kaegs，这个操作返回一个
QuerySet；而models.Publisher.objects.get(kwargs)来获取一个结果，如果这时候得到的结果大于一个或者为空都会抛出异常，空异常为DoesNotExist；可以对单个
对象如p1进行修改，p1.name = "..."，也可以在QuerySet上进行update，而后者则是对QuerySet中所有的元素都发生修改并返回修改的行数；删除对象也有两种方式，
一种是对象上的如p1.delete()，另一种也是基于QuerySet，这时候是删除整个QUertSet中的结果；当然也可以对QuerySet进行排序，使用QuerySet上的order_by方法，
如果参数前面不带“-”,则按升序返回，否则为逆序，排序的参数可以有多个，以“,”分割的字符串表示，当然可以在Publisher类中加入元类class Meta:ordering = [".."]
，使用这种方式给出默认情况下的排列顺序；有一点需要指出的是，在QuerySet上可以进行模糊查找，即这种情况下让查询关键字参数特殊化，如：name__contains = ".."
，更多的这种方法可以参看详细文档。

    可以在模型中定义一些重载方法，如__str__等，这样会对模型的信息输出等有一定帮助，实际上我总是喜欢定义这种必要的重载信息而不是看到那些原生态的打印信息。
